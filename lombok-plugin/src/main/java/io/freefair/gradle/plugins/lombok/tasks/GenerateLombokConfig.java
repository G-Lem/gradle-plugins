package io.freefair.gradle.plugins.lombok.tasks;

import lombok.Getter;
import lombok.Setter;
import lombok.SneakyThrows;
import org.codehaus.groovy.runtime.ResourceGroovyMethods;
import org.gradle.api.DefaultTask;
import org.gradle.api.file.RegularFileProperty;
import org.gradle.api.provider.ListProperty;
import org.gradle.api.provider.MapProperty;
import org.gradle.api.tasks.*;

import java.io.File;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.util.Map;
import java.util.stream.Stream;

@Getter
@Setter
public class GenerateLombokConfig extends DefaultTask {

    @OutputFile
    private final RegularFileProperty outputFile = getProject().getObjects().fileProperty();

    @Input
    private final ListProperty<String> imports = getProject().getObjects().listProperty(String.class);

    @Input
    private final MapProperty<String, String> properties = getProject().getObjects().mapProperty(String.class, String.class);

    @Nested
    private final ListProperty<LombokPropertyChange> configurationChanges = getProject().getObjects().listProperty(LombokPropertyChange.class);

    public GenerateLombokConfig() {
        outputFile.set(getProject().file("lombok.config"));
        onlyIf(t -> getProperties().isPresent() && !getProperties().get().isEmpty());
    }

    @TaskAction
    @SneakyThrows
    public void generateLombokConfig() {
        File file = outputFile.getAsFile().get();

        if (file.isFile()) {
            try (Stream<String> lines = Files.lines(file.toPath(), StandardCharsets.ISO_8859_1)) {
                if (lines.noneMatch(line -> line.startsWith("#") && line.contains("io.freefair.lombok"))) {
                    String message = file + " already exists and was not generated by this task";
                    getLogger().warn(message);
                    throw new StopExecutionException(message);
                }
            }
        }

        try (PrintWriter writer = ResourceGroovyMethods.newPrintWriter(file, "ISO-8859-1")) {
            writer.println("# This file is generated by the 'io.freefair.lombok' Gradle plugin");
            imports.get().forEach(imported ->
                    writer.println("import " + imported));
            properties.get().entrySet().stream()
                    .sorted(Map.Entry.comparingByKey(String.CASE_INSENSITIVE_ORDER))
                    .forEach(entry ->
                            writer.println(entry.getKey() + " = " + entry.getValue())
                    );
            configurationChanges.get().forEach(change ->
                    writer.println(configLine(change)));
        }
    }

    private String configLine(LombokPropertyChange change) {
        String propertyName = change.getPropertyName();
        String value = change.getValue();
        ChangeType changeType = change.getChangeType();
        switch (changeType) {
            case SET:
                return propertyName + " = " + value;
            case ADD:
                return propertyName + " += " + value;
            case REMOVE:
                return propertyName + " -= " + value;
            case CLEAR:
                return "clear " + propertyName;
            default:
                throw new IllegalStateException("Unexpected value: " + changeType);
        }
    }
}
